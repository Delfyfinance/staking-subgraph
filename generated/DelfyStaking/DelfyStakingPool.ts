// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptPendingOwner extends ethereum.Event {
  get params(): AcceptPendingOwner__Params {
    return new AcceptPendingOwner__Params(this);
  }
}

export class AcceptPendingOwner__Params {
  _event: AcceptPendingOwner;

  constructor(event: AcceptPendingOwner) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AddPool extends ethereum.Event {
  get params(): AddPool__Params {
    return new AddPool__Params(this);
  }
}

export class AddPool__Params {
  _event: AddPool;

  constructor(event: AddPool) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allocationPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BlockReward extends ethereum.Event {
  get params(): BlockReward__Params {
    return new BlockReward__Params(this);
  }
}

export class BlockReward__Params {
  _event: BlockReward;

  constructor(event: BlockReward) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChangeOwner extends ethereum.Event {
  get params(): ChangeOwner__Params {
    return new ChangeOwner__Params(this);
  }
}

export class ChangeOwner__Params {
  _event: ChangeOwner;

  constructor(event: ChangeOwner) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get delfy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardsPerblock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startBlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolAllocUpdated extends ethereum.Event {
  get params(): PoolAllocUpdated__Params {
    return new PoolAllocUpdated__Params(this);
  }
}

export class PoolAllocUpdated__Params {
  _event: PoolAllocUpdated;

  constructor(event: PoolAllocUpdated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RejectPendingOwner extends ethereum.Event {
  get params(): RejectPendingOwner__Params {
    return new RejectPendingOwner__Params(this);
  }
}

export class RejectPendingOwner__Params {
  _event: RejectPendingOwner;

  constructor(event: RejectPendingOwner) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdatePool extends ethereum.Event {
  get params(): UpdatePool__Params {
    return new UpdatePool__Params(this);
  }
}

export class UpdatePool__Params {
  _event: UpdatePool;

  constructor(event: UpdatePool) {
    this._event = event;
  }

  get poolId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accDelfyPerShare(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelfyStakingPool__getPoolResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DelfyStakingPool__getUserPoolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DelfyStakingPool extends ethereum.SmartContract {
  static bind(address: Address): DelfyStakingPool {
    return new DelfyStakingPool("DelfyStakingPool", address);
  }

  changeOwnerDelay(): BigInt {
    let result = super.call(
      "changeOwnerDelay",
      "changeOwnerDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_changeOwnerDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "changeOwnerDelay",
      "changeOwnerDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delay(): BigInt {
    let result = super.call("delay", "delay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("delay", "delay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delfy(): Address {
    let result = super.call("delfy", "delfy():(address)", []);

    return result[0].toAddress();
  }

  try_delfy(): ethereum.CallResult<Address> {
    let result = super.tryCall("delfy", "delfy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  delfyPerBlock(): BigInt {
    let result = super.call("delfyPerBlock", "delfyPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delfyPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delfyPerBlock",
      "delfyPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(param0: Address): DelfyStakingPool__getPoolResult {
    let result = super.call(
      "getPool",
      "getPool(address):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new DelfyStakingPool__getPoolResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getPool(
    param0: Address
  ): ethereum.CallResult<DelfyStakingPool__getPoolResult> {
    let result = super.tryCall(
      "getPool",
      "getPool(address):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DelfyStakingPool__getPoolResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getPoolIds(): Array<Address> {
    let result = super.call("getPoolIds", "getPoolIds():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getPoolIds(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getPoolIds", "getPoolIds():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUserPoolInfo(
    param0: Address,
    param1: Address
  ): DelfyStakingPool__getUserPoolInfoResult {
    let result = super.call(
      "getUserPoolInfo",
      "getUserPoolInfo(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new DelfyStakingPool__getUserPoolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getUserPoolInfo(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<DelfyStakingPool__getUserPoolInfoResult> {
    let result = super.tryCall(
      "getUserPoolInfo",
      "getUserPoolInfo(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DelfyStakingPool__getUserPoolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendinOwner(): Address {
    let result = super.call("pendinOwner", "pendinOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendinOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendinOwner", "pendinOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingDelfy(_pid: Address, _user: Address): BigInt {
    let result = super.call(
      "pendingDelfy",
      "pendingDelfy(address,address):(uint256)",
      [ethereum.Value.fromAddress(_pid), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_pendingDelfy(_pid: Address, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingDelfy",
      "pendingDelfy(address,address):(uint256)",
      [ethereum.Value.fromAddress(_pid), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptPendingOwnerCall extends ethereum.Call {
  get inputs(): AcceptPendingOwnerCall__Inputs {
    return new AcceptPendingOwnerCall__Inputs(this);
  }

  get outputs(): AcceptPendingOwnerCall__Outputs {
    return new AcceptPendingOwnerCall__Outputs(this);
  }
}

export class AcceptPendingOwnerCall__Inputs {
  _call: AcceptPendingOwnerCall;

  constructor(call: AcceptPendingOwnerCall) {
    this._call = call;
  }
}

export class AcceptPendingOwnerCall__Outputs {
  _call: AcceptPendingOwnerCall;

  constructor(call: AcceptPendingOwnerCall) {
    this._call = call;
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _lpToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get __owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get pid(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withdrawRewards(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsPerBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class RejectPendingOwnerCall extends ethereum.Call {
  get inputs(): RejectPendingOwnerCall__Inputs {
    return new RejectPendingOwnerCall__Inputs(this);
  }

  get outputs(): RejectPendingOwnerCall__Outputs {
    return new RejectPendingOwnerCall__Outputs(this);
  }
}

export class RejectPendingOwnerCall__Inputs {
  _call: RejectPendingOwnerCall;

  constructor(call: RejectPendingOwnerCall) {
    this._call = call;
  }
}

export class RejectPendingOwnerCall__Outputs {
  _call: RejectPendingOwnerCall;

  constructor(call: RejectPendingOwnerCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetDelfyPerBlockCall extends ethereum.Call {
  get inputs(): SetDelfyPerBlockCall__Inputs {
    return new SetDelfyPerBlockCall__Inputs(this);
  }

  get outputs(): SetDelfyPerBlockCall__Outputs {
    return new SetDelfyPerBlockCall__Outputs(this);
  }
}

export class SetDelfyPerBlockCall__Inputs {
  _call: SetDelfyPerBlockCall;

  constructor(call: SetDelfyPerBlockCall) {
    this._call = call;
  }

  get _delfyPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelfyPerBlockCall__Outputs {
  _call: SetDelfyPerBlockCall;

  constructor(call: SetDelfyPerBlockCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withdrawRewards(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
