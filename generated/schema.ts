// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get poolSupply(): BigInt {
    let value = this.get("poolSupply");
    return value.toBigInt();
  }

  set poolSupply(value: BigInt) {
    this.set("poolSupply", Value.fromBigInt(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get allocationPoints(): BigInt {
    let value = this.get("allocationPoints");
    return value.toBigInt();
  }

  set allocationPoints(value: BigInt) {
    this.set("allocationPoints", Value.fromBigInt(value));
  }

  get totalRewardsMinted(): BigInt {
    let value = this.get("totalRewardsMinted");
    return value.toBigInt();
  }

  set totalRewardsMinted(value: BigInt) {
    this.set("totalRewardsMinted", Value.fromBigInt(value));
  }

  get lastRewardBlock(): BigInt {
    let value = this.get("lastRewardBlock");
    return value.toBigInt();
  }

  set lastRewardBlock(value: BigInt) {
    this.set("lastRewardBlock", Value.fromBigInt(value));
  }

  get accruedShare(): BigInt {
    let value = this.get("accruedShare");
    return value.toBigInt();
  }

  set accruedShare(value: BigInt) {
    this.set("accruedShare", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get pools(): Array<string> {
    let value = this.get("pools");
    return value.toStringArray();
  }

  set pools(value: Array<string>) {
    this.set("pools", Value.fromStringArray(value));
  }

  get totalRewardsEarned(): BigInt {
    let value = this.get("totalRewardsEarned");
    return value.toBigInt();
  }

  set totalRewardsEarned(value: BigInt) {
    this.set("totalRewardsEarned", Value.fromBigInt(value));
  }
}

export class UserPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserPool", id.toString(), this);
  }

  static load(id: string): UserPool | null {
    return store.get("UserPool", id) as UserPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get totalAmountDeposited(): BigInt {
    let value = this.get("totalAmountDeposited");
    return value.toBigInt();
  }

  set totalAmountDeposited(value: BigInt) {
    this.set("totalAmountDeposited", Value.fromBigInt(value));
  }

  get lastClaim(): BigInt {
    let value = this.get("lastClaim");
    return value.toBigInt();
  }

  set lastClaim(value: BigInt) {
    this.set("lastClaim", Value.fromBigInt(value));
  }

  get lastWithdrawal(): BigInt {
    let value = this.get("lastWithdrawal");
    return value.toBigInt();
  }

  set lastWithdrawal(value: BigInt) {
    this.set("lastWithdrawal", Value.fromBigInt(value));
  }

  get rewardDebt(): BigInt {
    let value = this.get("rewardDebt");
    return value.toBigInt();
  }

  set rewardDebt(value: BigInt) {
    this.set("rewardDebt", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class Periphery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Periphery entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Periphery entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Periphery", id.toString(), this);
  }

  static load(id: string): Periphery | null {
    return store.get("Periphery", id) as Periphery | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get rewardPerBlock(): BigInt {
    let value = this.get("rewardPerBlock");
    return value.toBigInt();
  }

  set rewardPerBlock(value: BigInt) {
    this.set("rewardPerBlock", Value.fromBigInt(value));
  }

  get totalAllocationPoints(): BigInt {
    let value = this.get("totalAllocationPoints");
    return value.toBigInt();
  }

  set totalAllocationPoints(value: BigInt) {
    this.set("totalAllocationPoints", Value.fromBigInt(value));
  }

  get globalStartBlock(): BigInt {
    let value = this.get("globalStartBlock");
    return value.toBigInt();
  }

  set globalStartBlock(value: BigInt) {
    this.set("globalStartBlock", Value.fromBigInt(value));
  }

  get delfy(): string {
    let value = this.get("delfy");
    return value.toString();
  }

  set delfy(value: string) {
    this.set("delfy", Value.fromString(value));
  }
}
